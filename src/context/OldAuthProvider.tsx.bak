import {
	ReactNode,
	createContext,
	useCallback,
	useContext,
	useEffect,
} from 'react';
import axios from '@lib/axios';
import useSWR from 'swr';

const AuthContext = createContext({});

interface Props {
	children: ReactNode;
}

export function AuthProvider({ children }: Props) {
	const csrf = () => axios.get('/sanctum/csrf-cookie');

	// const getUser = async () => {
	// 	axios
	// 		.get('/v1/user')
	// 		.then((res) => setUser(res.data.data))
	// 		.catch((e) => {
	// 			if (e.response.status !== 409) throw e;

	// 			redirect('/verify-email');
	// 		});
	// };
	const {
		data: user,
		error,
		isLoading,
		mutate,
	} = useSWR('/v1/user', () =>
		axios
			.get('/v1/user')
			.then((res) => res.data.data)
			.catch((e) => {
				if (e.response.status !== 409) throw e;

				// redirect('/verify-email');
			})
	);

	const login = async ({ setErrors, ...props }) => {
		await csrf();

		axios
			.post('/login', props)
			.then(() => {
				window.location.pathname = '/profile';
			})
			.catch((e) => {
				if (e.response.status !== 422) throw e;

				setErrors(e.response.data.errors);
			});
	};

	const register = async ({ setErrors, ...props }) => {
		await csrf();

		axios
			.post('/register', props)
			.then(() => {
				window.location.pathname = '/profile';
			})
			.catch((e) => {
				if (e.response.status !== 422) throw e;

				setErrors(e.response.data.errors);
			});
	};

	const logout = async () => {
		if (!error) {
			await axios.post('/logout').then(() => mutate());
		}

		window.location.pathname = '/login';
	};

	return (
		<AuthContext.Provider
			value={{ user, isLoading, login, register, logout }}
		>
			{children}
		</AuthContext.Provider>
	);
}

export default function useAuth() {
	return useContext(AuthContext);
}

// export default AuthContext;
